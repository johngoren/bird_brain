#!/usr/bin/env python3

import click
import os
import sqlite3
import colorgram

# main.38.com.natureguides.birdguide.obb

NUM_SPECIES_IMAGES = 792

PROJECT_DIR = "/Users/johngorenfeld/Desktop/natureguides"
PACKAGE = "com.johngorenfeld.birdguide"

ASSETS_SOURCE_DIR = f'{PROJECT_DIR}/assets'
ASSETS_TARGET_DIR = f'{PROJECT_DIR}/Android/app/src/main/assets'

OBB_VERSION = 103
OBB_FILENAME = f'main.{OBB_VERSION}.{PACKAGE}.obb'

OBB_SOURCE_DIR = f'{PROJECT_DIR}/assets/expansion'
OBB_CREATION_PATH = f'{OBB_SOURCE_DIR}/{OBB_FILENAME}'

OBB_DESTINATION_DIR = f'/storage/emulated/0/Android/obb/{PACKAGE}'
OBB_DESTINATION_PATH = f'{OBB_DESTINATION_DIR}/{OBB_FILENAME}'

ORIGINALS_PATH = f'/Users/johngorenfeld/Dropbox/natureguidesOriginals/Europe'
ORIGINAL_SPECIES_IMAGES_PATH = f'{ORIGINALS_PATH}/SpeciesImages'

STRIX_DB_PATH = f'/Users/johngorenfeld/Desktop/natureguides/Android/app/src/main/assets/databases/Strix_BIRDGUIDE.db'


@click.group()
def cli():
    """Utilities for Nature Guides"""
    pass

@cli.group()
def settings():
   """Show Birdbrain's current config"""
   click.echo('\n\n\nBirdbrain config\n\n')



@cli.command()
def install():
    """Install APK on device"""
    DEBUG_APK_PATH = f'/Users/johngorenfeld/Desktop/natureguides/Android/app/build/outputs/apk/debug/app-debug.apk'


@cli.command()
def status():
    """Reports OBB situation, audits assets"""
    
    click.echo(f'\n\n\n\nBirdbrain status report')
    click.echo(f'-----------------------')

    click.echo('\nApp version:')
    cmd = 'grep "versionCode" /Users/johngorenfeld/Desktop/natureguides/Android/app/build.gradle'
    os.system(cmd)

    click.echo('\nContent provider will use expansion version:')
    cmd = 'grep -A 1 "mainVersion" /Users/johngorenfeld/Desktop/natureguides/Android/app/src/main/AndroidManifest.xml'
    os.system(cmd)
        
    click.echo('\nExpansion packs installed on the device:')
    cmd = f'adb shell ls {OBB_DESTINATION_DIR}'
    os.system(cmd)

    click.echo('\n\n')

@cli.command()
def populate():
    """Sets up test assets."""
    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images'
    os.system(cmd_mkdir)

    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images/species'
    os.system(cmd_mkdir)
    
    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images/maps'
    os.system(cmd_mkdir)

    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images/maps/bto'
    os.system(cmd_mkdir)

    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images/maps/collins'
    os.system(cmd_mkdir)

    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/songs'
    os.system(cmd_mkdir)

    cmd_species = f'cp {ASSETS_SOURCE_DIR}/expansion/images/species/* {ASSETS_TARGET_DIR}/expansion/images/species/'
    os.system(cmd_species)

    cmd_songs = f'cp {ASSETS_SOURCE_DIR}/expansion/songs/* {ASSETS_TARGET_DIR}/expansion/songs/'
    os.system(cmd_songs)

    cmd_plumages = f'cp {ASSETS_SOURCE_DIR}/expansion/images/plumages/* {ASSETS_TARGET_DIR}/expansion/images/plumages/'
    os.system(cmd_plumages)

@cli.command()
def purge():
    """Removes test assets."""
    cmd = 'rm -rf /Users/johngorenfeld/Desktop/natureguides/Android/app/src/main/assets/expansion/*'
    os.system(cmd)


@cli.command()
def pack():
    """Install OBB expansion pack on Android device"""
    cmd = f'adb mkdir {OBB_DESTINATION_DIR}'
    os.system(cmd)
    cmd = f'adb push {OBB_SOURCE_DIR}/main.{OBB_VERSION}.{PACKAGE}.obb {OBB_DESTINATION_PATH}'
    click.echo(cmd)
    os.system(cmd)

@cli.command()
def unpack():
    """Remove OBB expansion pack from Android device"""

@cli.command()
def optimise():
    """Optimise images."""
        
@cli.command()
def boot():
    """Run app after installing OBB expansion pack"""
    pass

@cli.command()
def audit():
    """Check for missing media assets"""

    family_images = os.listdir(f'{ASSETS_SOURCE_DIR}/images/family')
    species_images = os.listdir(f'{ASSETS_SOURCE_DIR}/expansion/images/species')
    plumage_images = os.listdir(f'{ASSETS_SOURCE_DIR}/expansion/images/plumages')
    map_images = os.listdir(f'{ASSETS_SOURCE_DIR}/expansion/images/maps')

    click.echo(f'Found {len(family_images)} family image files')    
    click.echo(f'Found {len(species_images)} species image files')
    click.echo(f'Found {len(plumage_images)} plumage image files')

    if len(species_images) != NUM_SPECIES_IMAGES:
        missing = NUM_SPECIES_IMAGES - len(species_images)
        click.echo(f'{missing} species images are missing.')

@cli.command()
def missing():
    """List missing plates"""

    original_species_images = os.listdir(f'{ORIGINAL_SPECIES_IMAGES_PATH}')
    our_species_images = os.listdir(f'{OBB_SOURCE_DIR}/images/species')

    for original in original_species_images:
        if original not in our_species_images:
            click.echo(original) 


@cli.command()
def forge():
    """Build new expansion pack from assets"""

    # zip -r0 zipfilename.zip files-to-zip

    cmd = f'cd {OBB_SOURCE_DIR} && zip -r0 {OBB_FILENAME} ./ -x "*.obb"'
    click.echo(cmd)
    os.system(cmd)

    click.echo('Resulting in this OBB:')
    size_cmd = f'ls -lh {OBB_CREATION_PATH}'


@cli.command()
def colors():
    """Build color palette table for bird images"""

    species_images = os.listdir(f'{ASSETS_SOURCE_DIR}/expansion/images/species')
    click.echo(f'Processing {len(species_images)} species image files')

    for filename in species_images:
        uri = f'{ASSETS_SOURCE_DIR}/expansion/images/species/{filename}'
        colors = colorgram.extract(uri, 3)

        rgb1 = colors[1].rgb
        rgb2 = colors[2].rgb

        int1 = getIfromRGB(rgb1)
        int2 = getIfromRGB(rgb2)
        
        click.echo(f'{filename},{int1},{int2}')

def getIfromRGB(rgb):
    red = rgb[0]
    green = rgb[1]
    blue = rgb[2]
    RGBint = (red<<16) + (green<<8) + blue
    return RGBint

@cli.command()
def plumagenames():
    """Fit plumage filenames to Strix entries"""
    pass

@cli.command()
def species():
     """Prepare species images"""
     cmd = 'mogrify -verbose -format jpg -background white -alpha remove -flatten -alpha off -define jpeg:extent=400kb -path /Users/johngorenfeld/Desktop/natureguides/assets/expansion/images/species *.png'
     os.system(cmd)

if __name__ == '__main__':
    cli()


#     query_families = "select entity_reference from strix_entities where entity_type='taxon.group'"
#     conn = sqlite3.connect(STRIX_DB_PATH)
#     c = conn.cursor()

#     click.echo('Missing images:')

#     for row in c.execute(query_families):
#         ref = row[0]
#         filename = f'{ref}.png'
#         if filename not in family_images:
#             click.echo(filename)