#!/usr/bin/env python3

import click
import os
import sqlite3

PROJECT_DIR = "/Users/Desktop/natureguides"
PACKAGE = "com.natureguides.birdguide"

OBB_VERSION = 38
OBB_FILENAME = f'main.{OBB_VERSION}.{PACKAGE}.obb'

ASSETS_SOURCE_DIR = "/Volumes/Birdbrain/Natureguides/assets"
ASSETS_TARGET_DIR = f'{PROJECT_DIR}/Android/app/src/main/assets'

OBB_SOURCE_DIR = f'/Volumes/Birdbrain/Natureguides/obb'
OBB_CREATION_PATH = f'{OBB_SOURCE_DIR}/{OBB_FILENAME}'

OBB_DESTINATION_DIR = f'/storage/emulated/0/Android/obb/{PACKAGE}'
OBB_DESTINATION_PATH = f'{OBB_DESTINATION_DIR}/{OBB_FILENAME}'

STRIX_DB_PATH = f'/Users/johngorenfeld/Desktop/natureguides/Android/app/src/main/assets/databases/Strix_BIRDGUIDE.db'





@click.group()
def cli():
    """Utilities for Nature Guides"""
    pass


@cli.command()
def install():
    """Install APK on device"""
    DEBUG_APK_PATH = f'/Users/johngorenfeld/Desktop/natureguides/Android/app/build/outputs/apk/debug/app-debug.apk'


@cli.command()
def status():
    """Checks OBB situaton and audits assets"""

    
    click.echo(f'\n\n\n\nBirdbrain status report.')
    click.echo(f'------------------------')
    click.echo(f'OBB directory: {OBB_DESTINATION_DIR}...')
    
    cmd = f'adb shell ls {OBB_DESTINATION_DIR}'
    output = os.system(cmd)
    
    click.echo('\n\n')
    click.echo('Test assets dir...')
    cmd = f'ls {ASSETS_TARGET_DIR}/expansion'
    output = os.system(cmd)
    

    pass

@cli.command()
def populate():
    """Sets up test assets."""
    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images'
    os.system(cmd_mkdir)

    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images/species'
    os.system(cmd_mkdir)
    
    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images/maps'
    os.system(cmd_mkdir)

    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images/maps/bto'
    os.system(cmd_mkdir)

    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/images/maps/collins'
    os.system(cmd_mkdir)

    cmd_mkdir = f'mkdir {ASSETS_TARGET_DIR}/expansion/songs'
    os.system(cmd_mkdir)

    cmd_species = f'cp {ASSETS_SOURCE_DIR}/expansion/images/species/*.png {ASSETS_TARGET_DIR}/expansion/images/species/'
    os.system(cmd_species)

    cmd_songs = f'cp {ASSETS_SOURCE_DIR}/expansion/songs/* {ASSETS_TARGET_DIR}/expansion/songs'
    os.system(cmd_songs)

    cmd_plumages = f'cp {ASSETS_SOURCE_DIR}/expansion/images/plumages/* {ASSETS_TARGET_DIR}/expansion/images/plumages/'
    os.system(cmd_plumages)

@cli.command()
def purge():
    """Removes test assets."""
    cmd = 'rm -rf /Users/johngorenfeld/Desktop/natureguides/Android/app/src/main/assets/expansion/*'
    os.system(cmd)


@cli.command()
def pack():
    """Install OBB expansion pack on Android device"""
    #TODO: Push dir if doesn't exist.
    cmd = f'adb push {OBB_SOURCE_DIR}/main.{OBB_VERSION}.{PACKAGE}.obb {OBB_DESTINATION_DIR}'
    os.system(cmd)
    

@cli.command()
def boot():
    """Run app after installing OBB expansion pack"""
    pass

@cli.command()
def audit():
    """Check for missing media assets"""

    family_images = os.listdir(f'{ASSETS_SOURCE_DIR}/images/family')
    species_images = os.listdir(f'{ASSETS_SOURCE_DIR}/expansion/images/species')

    click.echo(f'Found {len(family_images)} family image files')

    query_families = "select entity_reference from strix_entities where entity_type='taxon.group'"
    conn = sqlite3.connect(STRIX_DB_PATH)
    c = conn.cursor()

    click.echo('Missing images:')

    for row in c.execute(query_families):
        ref = row[0]
        filename = f'{ref}.png'
        if filename not in family_images:
            click.echo(filename)

@cli.command()
def forge():
    """Build new expansion pack from assets"""

    # zip -r0 zipfilename.zip files-to-zip

    cmd = f'zip -r0 {OBB_CREATION_PATH} {ASSETS_SOURCE_DIR}/expansion/*'
    os.system(cmd)

    # 1. Make ZIP file. Uncompressed.
    # 2. Rename it OBB.

if __name__ == '__main__':
    cli()

